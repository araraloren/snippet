
package snippet:c@0.1.0;

interface compiler {
    use snippet:plugin/types@0.1.0.{error-type, mode};

    resource compiler {
        constructor();

        /// Is the compiler in debug mode?
        debug: func() -> bool;

        /// Current language.
        lang: func() -> string;

        /// Current arguments.
        args: func() -> list<string>;

        /// Current compile mode.
        mode: func() -> mode;
        
        /// Set the language.
        set-lang: func(language: string) -> result<_, error-type>;

        /// Set debug mode.
        set-debug: func(debug: bool) -> result<_, error-type>;

        /// Set the compile mode.
        set-mode: func(mode: mode) -> result<_, error-type>;

        /// Set the optimize level.
        set-opt-level: func(level: u8) -> result<_, error-type>;

        /// Set the c standard.
        set-standard: func(std: string) -> result<_, error-type>;

        /// Add a macro.
        add-macro: func(macro: string, value: option<string>) -> result<_, error-type>;

        /// Add include path.
        add-include-path: func(path: string) -> result<_, error-type>;

        /// Add library path.
        add-library-path: func(path: string) -> result<_, error-type>;

        /// Link a library.
        link-library-path: func(library: string) -> result<_, error-type>;

        /// Add an argument.
        add-arg: func(arg: string) -> result<_, error-type>;

        /// Append arguments.
        add-args: func(args: list<string>) -> result<_, error-type>;

        /// Compile the code
        compile: func(source: list<string>, out: string) -> result<string, error-type>;

        /// Compile the file
        compile-file: func(path: string, out: string) -> result<string, error-type>;

        /// Link the object into executable
        link-obj: func(objs: list<string>, out: string) -> result<string, error-type>;
    }
}